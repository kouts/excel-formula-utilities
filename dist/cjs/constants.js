"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const types = {};
const TOK_TYPE_NOOP = types.TOK_TYPE_NOOP = "noop";
const TOK_TYPE_OPERAND = types.TOK_TYPE_OPERAND = "operand";
const TOK_TYPE_FUNCTION = types.TOK_TYPE_FUNCTION = "function";
const TOK_TYPE_SUBEXPR = types.TOK_TYPE_SUBEXPR = "subexpression";
const TOK_TYPE_ARGUMENT = types.TOK_TYPE_ARGUMENT = "argument";
const TOK_TYPE_OP_PRE = types.TOK_TYPE_OP_PRE = "operator-prefix";
const TOK_TYPE_OP_IN = types.TOK_TYPE_OP_IN = "operator-infix";
const TOK_TYPE_OP_POST = types.TOK_TYPE_OP_POST = "operator-postfix";
const TOK_TYPE_WHITE_SPACE = types.TOK_TYPE_WHITE_SPACE = "white-space";
const TOK_TYPE_UNKNOWN = types.TOK_TYPE_UNKNOWN = "unknown";
const TOK_SUBTYPE_START = types.TOK_SUBTYPE_START = "start";
const TOK_SUBTYPE_STOP = types.TOK_SUBTYPE_STOP = "stop";
const TOK_SUBTYPE_TEXT = types.TOK_SUBTYPE_TEXT = "text";
const TOK_SUBTYPE_NUMBER = types.TOK_SUBTYPE_NUMBER = "number";
const TOK_SUBTYPE_LOGICAL = types.TOK_SUBTYPE_LOGICAL = "logical";
const TOK_SUBTYPE_ERROR = types.TOK_SUBTYPE_ERROR = "error";
const TOK_SUBTYPE_RANGE = types.TOK_SUBTYPE_RANGE = "range";
const TOK_SUBTYPE_MATH = types.TOK_SUBTYPE_MATH = "math";
const TOK_SUBTYPE_CONCAT = types.TOK_SUBTYPE_CONCAT = "concatenate";
const TOK_SUBTYPE_INTERSECT = types.TOK_SUBTYPE_INTERSECT = "intersect";
const TOK_SUBTYPE_UNION = types.TOK_SUBTYPE_UNION = "union";
exports.TOK_SUBTYPE_CONCAT = TOK_SUBTYPE_CONCAT;
exports.TOK_SUBTYPE_ERROR = TOK_SUBTYPE_ERROR;
exports.TOK_SUBTYPE_INTERSECT = TOK_SUBTYPE_INTERSECT;
exports.TOK_SUBTYPE_LOGICAL = TOK_SUBTYPE_LOGICAL;
exports.TOK_SUBTYPE_MATH = TOK_SUBTYPE_MATH;
exports.TOK_SUBTYPE_NUMBER = TOK_SUBTYPE_NUMBER;
exports.TOK_SUBTYPE_RANGE = TOK_SUBTYPE_RANGE;
exports.TOK_SUBTYPE_START = TOK_SUBTYPE_START;
exports.TOK_SUBTYPE_STOP = TOK_SUBTYPE_STOP;
exports.TOK_SUBTYPE_TEXT = TOK_SUBTYPE_TEXT;
exports.TOK_SUBTYPE_UNION = TOK_SUBTYPE_UNION;
exports.TOK_TYPE_ARGUMENT = TOK_TYPE_ARGUMENT;
exports.TOK_TYPE_FUNCTION = TOK_TYPE_FUNCTION;
exports.TOK_TYPE_NOOP = TOK_TYPE_NOOP;
exports.TOK_TYPE_OPERAND = TOK_TYPE_OPERAND;
exports.TOK_TYPE_OP_IN = TOK_TYPE_OP_IN;
exports.TOK_TYPE_OP_POST = TOK_TYPE_OP_POST;
exports.TOK_TYPE_OP_PRE = TOK_TYPE_OP_PRE;
exports.TOK_TYPE_SUBEXPR = TOK_TYPE_SUBEXPR;
exports.TOK_TYPE_UNKNOWN = TOK_TYPE_UNKNOWN;
exports.TOK_TYPE_WHITE_SPACE = TOK_TYPE_WHITE_SPACE;
exports.types = types;
